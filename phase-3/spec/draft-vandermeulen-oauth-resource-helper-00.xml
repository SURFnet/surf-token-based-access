<?xml version="1.0" encoding="utf-8"?>
<?xml-model href="rfc7991bis.rnc"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>

<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>

<rfc
  xmlns:xi="http://www.w3.org/2001/XInclude"
  category="info"
  docName="draft-vandermeulen-oauth-resource-helper-00"
  ipr="trust200902"
  obsoletes=""
  updates=""
  submissionType="IETF"
  xml:lang="en"
  version="3">

  <front>
    <title abbrev="OAuth Resource Helper">OAuth Resource Helper</title>

    <seriesInfo name="Internet-Draft" value="draft-vandermeulen-oauth-resource-helper-00"/>

    <author fullname="Pieter van der Meulen" initials="P." surname="van der Meulen">
      <organization>SURF</organization>
      <address>
        <postal>
          <street>Moreelsepark 48</street>
          <code>3511 EP</code>
          <city>Utrecht</city>
          <country>NL</country>
        </postal>        
        <email>pieter.vandermeulen@surf.nl</email>
      </address>
    </author>
  
    <author fullname="Michiel de Jong" initials="M.B." surname="de Jong">
      <organization>Ponder Source</organization>
      <address>
        <email>michiel@unhosted.org</email>
      </address>
    </author>
   
    <date year="2024"/>

    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>

    <keyword>OAuth</keyword>
    <keyword>Resource Helper</keyword>

    <abstract>
      <t>
      A Resource Helper can replace the scope-picking and scope-displaying capabilities of an OAuth Authorization Server.
      This makes the software architecture of the Authorization Server more modular, and can alleviate organisational challenges
      when the API of a Resource Server evolve. Only the Resource Helper needs to adapt in lock-step with API changes,
      and the rest of the Authorization Server can be managed on a more stable software deployment cycle.
      The Resource Helper provides two endpoints: a "pick" endpoint for the selection of access scopes, and a "view" endpoint
      for viewing them.
      </t>
    </abstract>
 
  </front>

  <middle>
    
    <section>
      <name>Introduction</name>
      <t>In Research and education (R&E), we see new standards evolving (e.g. in AARC https://aarc-project.eu) that address the use-cases that
      are particularly relevant in that environment, and that are not addressed by existing OAuth standards. This is linked to a move away from
      authentication mechanisms like passwords, SSH keys and X.509 certificates towards token based authentication. In R&E, we see that the
      organisations in control of the various resource servers and clients work together in communities. These communities run an authorization
      server and manage trust and authorization policies. In this context we see that the authorization server does not have detailed knowledge
      of the resources and access modes that a resource server can offer, and thus is not well-placed to present a scope selection GUI that goes
      beyond using a generic description of the scope. This is a problem for use-cases where more fine-grained control over the level of access
      is required. E.g. granting access to a specific folder on a storage server, or granting access to a specific computing resource and that
      cannot be solved by establishing a list of generic scopes. Another usecase that we want to address is where there are several resource servers
      that offer a similar service using the same protocol, e.g. storage servers that offer WebDAV access to files. In this case, the user should be
      able to choose the resource server that they want to access, and the client should not have to know about the resource servers in advance. We
      aim for a solution that does not require changes to existing resources servers, and that will work with existing OAuth clients. We expect that
      our solution will be of interest to other communities that have similar requirements, where the authorization server and resource server are
      developed by different entities.

      We considered using the Lodging Intent Pattern, a "pre-dance" where the client first obtains a structured scope before initiating the main OAuth dance,
      but we rejected this approach because it creates an undesirable many-to-many relationship between clients and the specific resource servers. Instead,
      we want to hide the resource server behind the authorization server which acts as a trusted broker between the various clients of various the organisations
      and the various resource servers of various (other) organisations.

      We therefore want to propose an OAuth extension which adds a "scope picker" service close to each resource server, to which the authorization server
      redirects the user in a "sub-dance", leaving the GUI of the authorization server generic and easy to maintain. This works as follows: using the standard
      authorization code flow, the client redirects the user to the authorization server. The client can request a specific resource server by including an
      audience, or it can use a scope to request a specific type of service (e.g. WebDAV). The authorization server then redirects the user to a well-known
      endpoint on the resource server's scope picker service based on the client's and user's preferences and applies any restrictions based on the communities'
      policy. The scope picker shows a GUI in which the user can select e.g. a folder and set the level from the ones they have access to and set the level of
      access (read, write) and builds a structured scope from this information. This structured scope is given a human-readable name, either suggested by the
      scope picker or chosen by the user. The scope picker then redirects the user back to the authorization server including all the scope information, which
      is then able to display the human-readable description in its GUI, even though the authorization server doesn't understand what it stands for. Optionally
      protocol specific information (e.g. the WebDAV URL to use) is returned to the authorization server, this is required because the client may not have
      knowledge about the resource server that the user selected. When the user then 'grants access' on the authorization server, the OAuth authorization code
      flow is continued back to the client as normal. The client can then use its access token to request the protocol specific information from the authorization
      server using a well-known endpoint on the authorization server and use it to access the resource server.
      </t>
      
      <section>
        <name>Requirements Language</name>
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
          "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT
          RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
          interpreted as described in BCP 14 <xref target="RFC2119"/>
          <xref target="RFC8174"/> when, and only when, they appear in
          all capitals, as shown here.</t>
      </section>
      <!-- [CHECK] The 'Requirements Language' section is optional -->

    </section>
    
    <section>
      <name>Pick endpoint</name>
      <t>Body text [REPLACE]</t>
    </section>   
    
    <section anchor="IANA">
    <!-- All drafts are required to have an IANA considerations section. See RFC 8126 for a guide.-->
      <name>IANA Considerations</name>
      <t>This memo includes no request to IANA. [CHECK]</t>
    </section>
    
    <section anchor="Security">
      <!-- All drafts are required to have a security considerations section. See RFC 3552 for a guide. -->
      <name>Security Considerations</name>
      <t>This document should not affect the security of the Internet. [CHECK]</t>
    </section>
    
    <!-- NOTE: The Acknowledgements and Contributors sections are at the end of this template -->
  </middle>

  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
        <!-- The recommended and simplest way to include a well known reference -->
        
      </references>
 
      <references>
        <name>Informative References</name>
       
        <reference anchor="exampleRefMin">
        <!-- [REPLACE/DELETE] Example minimum reference -->
          <front>
            <title>Title [REPLACE]</title>
            <author initials="Initials [REPLACE]" surname="Surname [REPLACE]">
              <organization/>
            </author>
            <date year="2006"/>
            <!-- [CHECK] -->
          </front>
        </reference>

        <reference anchor="exampleRefOrg" target="http://www.example.com/">
        <!-- [REPLACE/DELETE] Example reference written by an organization not a person -->
          <front>
            <title>Title [REPLACE]</title>
            <author>
              <organization>Organization [REPLACE]</organization>
            </author>
            <date year="1984"/>
            <!-- [CHECK] -->
          </front>
        </reference>       
       
      </references>
    </references>
    
    <section>
      <name>Appendix 1 [REPLACE/DELETE]</name>
      <t>This becomes an Appendix [REPLACE]</t>
    </section>

    <section anchor="Acknowledgements" numbered="false">
      <!-- [REPLACE/DELETE] an Acknowledgements section is optional -->
      <name>Acknowledgements</name>
      <t>This template uses extracts from templates written by Pekka Savola, Elwyn Davies and 
        Henrik Levkowetz. [REPLACE]</t>
    </section>
    
    <section anchor="Contributors" numbered="false">
      <!-- [REPLACE/DELETE] a Contributors section is optional -->
      <name>Contributors</name>
      <t>Thanks to all of the contributors. [REPLACE]</t>
      <!-- [CHECK] it is optional to add a <contact> record for some or all contributors -->
    </section>
    
 </back>
</rfc>
