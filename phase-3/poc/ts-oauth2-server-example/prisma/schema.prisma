// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String          @id @default(uuid()) @db.Uuid
  email          String          @unique @db.VarChar(255)
  passwordHash   String?         @db.VarChar(255)
  tokenVersion   Int             @default(0)
  lastLoginAt    DateTime?       @db.Timestamp(6)
  lastLoginIP    String?         @db.Inet
  createdIP      String          @db.Inet
  createdAt      DateTime        @default(now()) @db.Timestamp(6)
  updatedAt      DateTime?       @updatedAt
  OAuthAuthCodes OAuthAuthCode[]
  OAuthTokens    OAuthToken[]

  @@index([email])
}

enum GrantTypes {
  client_credentials
  authorization_code
  refresh_token
  implicit
  password
}

model OAuthClient {
  id               String             @id @default(uuid()) @db.Uuid
  name             String             @db.VarChar(255)
  secret           String?            @db.VarChar(255)
  createdAt        DateTime           @default(now()) @db.Timestamp(6)
  updatedAt        DateTime?          @updatedAt
  redirectUris     String[]
  allowedGrants    GrantTypes[]
  scopes           OAuthScope[]
  authCodes        OAuthAuthCode[]
  tokens           OAuthToken[]
  OAuthClientScope OAuthClientScope[]
}

model OAuthClientScope {
  clientId  String      @db.Uuid
  client    OAuthClient @relation(fields: [clientId], references: [id])
  scopeId   String      @db.Uuid
  scope     OAuthScope  @relation(fields: [scopeId], references: [id])
  createdAt DateTime    @default(now()) @db.Timestamp(6)
  updatedAt DateTime?   @updatedAt

  @@id([clientId, scopeId])
  @@index([clientId], name: "idx_oauthclient_oauthscope_clientid")
  @@index([scopeId], name: "idx_oauthclient_oauthscope_scopeid")
  @@map("oauthClient_oauthScope")
}

enum CodeChallengeMethod {
  S256
  plain
}

model OAuthAuthCode {
  code                String              @id
  redirectUri         String?
  codeChallenge       String?
  codeChallengeMethod CodeChallengeMethod @default(plain)
  expiresAt           DateTime
  createdAt           DateTime            @default(now()) @db.Timestamp(6)
  updatedAt           DateTime?           @updatedAt
  user                User?               @relation(fields: [userId], references: [id])
  userId              String?             @db.Uuid
  client              OAuthClient         @relation(fields: [clientId], references: [id])
  clientId            String              @db.Uuid
  scopes              OAuthScope[]
}

model OAuthToken {
  accessToken           String       @id
  accessTokenExpiresAt  DateTime
  refreshToken          String?      @unique
  refreshTokenExpiresAt DateTime?
  createdAt             DateTime     @default(now()) @db.Timestamp(6)
  updatedAt             DateTime?    @updatedAt
  client                OAuthClient  @relation(fields: [clientId], references: [id])
  clientId              String       @db.Uuid
  user                  User?        @relation(fields: [userId], references: [id])
  userId                String?      @db.Uuid
  scopes                OAuthScope[]

  @@index([accessToken], name: "idx_oauthtoken_accesstoken")
  @@index([refreshToken], name: "idx_oauthtoken_refreshtoken")
}

model OAuthScope {
  id            String          @id @db.Uuid
  name          String
  createdAt     DateTime        @default(now()) @db.Timestamp(6)
  updatedAt     DateTime?       @updatedAt
  OAuthClients  OAuthClient[]
  OAuthAuthCode OAuthAuthCode[]
  OAuthToken    OAuthToken[]
  OAuthClientScope OAuthClientScope[]

  @@index([name], name: "idx_oauthscope_name")
}
